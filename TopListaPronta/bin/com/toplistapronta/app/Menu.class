// Source code is decompiled from a .class file using FernFlower decompiler.
package TopLista;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Scanner;
import java.util.stream.Collectors;

public class Menu {
   private List<Usuario> usuarios = new ArrayList();
   private List<Mercado> mercados;
   private List<Item> itens;
   private Usuario usuarioLogado;
   private Scanner scanner;

   public Menu() {
      this.usuarios.add(new Usuario("admin", "admin", true));
      this.mercados = new ArrayList();
      this.itens = new ArrayList();
      this.scanner = new Scanner(System.in);
   }

   public static void main(String[] args) {
      (new Menu()).start();
   }

   public void start() {
      while(true) {
         if (this.usuarioLogado == null) {
            this.exibirMenuInicial();
            switch (opcao) {
               case "1":
                  this.entrar();
                  continue;
                  break;
               case "2":
                  this.cadastrarUsuario();
                  continue;
                  break;
               case "3":
                  System.out.println("Saindo do sistema. Até logo!");
                  return;
            }

            System.out.println("Opção inválida.\n");
         } else if (this.usuarioLogado.isAdmin()) {
            this.adminMenu();
         } else {
            this.usuarioMenu();
         }
      }
   }

   private void exibirMenuInicial() {
      System.out.println("===== MENU =====");
      System.out.println("1. Entrar");
      System.out.println("2. Cadastrar usuário");
      System.out.println("3. Sair");
      System.out.print("Escolha uma opção: ");
   }

   private void entrar() {
      System.out.print("Login: ");
      String login = this.scanner.nextLine().trim();
      System.out.print("Senha: ");
      String senha = this.scanner.nextLine().trim();
      Usuario user = this.autenticar(login, senha);
      if (user != null) {
         switch (user.getStatus()) {
            case DESATIVADA:
               System.out.println("Conta desativada.\n");
               break;
            case EXCLUIDA:
               System.out.println("Conta excluída.\n");
               break;
            default:
               this.usuarioLogado = user;
               System.out.println("\nLogin bem-sucedido! Bem-vindo, " + user.getLogin() + ".\n");
         }
      } else {
         System.out.println("Login ou senha incorretos.\n");
      }

   }

   private Usuario autenticar(String login, String senha) {
      Iterator var4 = this.usuarios.iterator();

      Usuario u;
      do {
         if (!var4.hasNext()) {
            return null;
         }

         u = (Usuario)var4.next();
      } while(!u.getLogin().equals(login) || !u.getSenha().equals(senha));

      return u;
   }

   private void cadastrarUsuario() {
      System.out.print("Novo login: ");
      String novoLogin = this.scanner.nextLine().trim();
      System.out.print("Nova senha: ");
      String novaSenha = this.scanner.nextLine().trim();
      if (this.existeLogin(novoLogin)) {
         System.out.println("Falha no cadastro: login já existe.\n");
      } else {
         this.usuarios.add(new Usuario(novoLogin, novaSenha, false));
         System.out.println("Cadastro realizado com sucesso! Agora faça login.\n");
      }

   }

   private void cadastrarAdmin() {
      System.out.print("Novo login (admin): ");
      String novoLogin = this.scanner.nextLine().trim();
      System.out.print("Nova senha: ");
      String novaSenha = this.scanner.nextLine().trim();
      if (this.existeLogin(novoLogin)) {
         System.out.println("Falha no cadastro: login já existe.\n");
      } else {
         this.usuarios.add(new Usuario(novoLogin, novaSenha, true));
         System.out.println("Cadastro de administrador realizado com sucesso!\n");
      }

   }

   private void cadastrarMercado() {
      System.out.print("Nome do mercado: ");
      String nome = this.scanner.nextLine().trim();
      System.out.print("CEP: ");
      String cep = this.scanner.nextLine().trim();
      System.out.print("Complemento: ");
      String complemento = this.scanner.nextLine().trim();
      Mercado m = new Mercado(nome, cep, complemento);

      do {
         System.out.print("Endereço: ");
         String end = this.scanner.nextLine().trim();
         System.out.print("Número: ");
         String numero = this.scanner.nextLine().trim();
         System.out.print("Latitude: ");
         double lat = Double.parseDouble(this.scanner.nextLine().trim());
         System.out.print("Longitude: ");
         double lon = Double.parseDouble(this.scanner.nextLine().trim());
         m.addLocalizacao(end, numero, lat, lon);
         System.out.print("Adicionar outra localização? (s/n): ");
      } while(this.scanner.nextLine().trim().equalsIgnoreCase("s"));

      this.mercados.add(m);
      System.out.println("Mercado '" + nome + "' cadastrado com sucesso!\n");
   }

   private void alterarMercado() {
      if (this.mercados.isEmpty()) {
         System.out.println("Nenhum mercado cadastrado.\n");
      } else {
         System.out.println("\n--- Mercados Cadastrados ---");

         int idx;
         for(idx = 0; idx < this.mercados.size(); ++idx) {
            System.out.printf("%d. %s%n", idx + 1, ((Mercado)this.mercados.get(idx)).getNome());
         }

         System.out.print("Escolha o número do mercado para alterar: ");
         idx = Integer.parseInt(this.scanner.nextLine().trim()) - 1;
         if (idx >= 0 && idx < this.mercados.size()) {
            Mercado m = (Mercado)this.mercados.get(idx);
            System.out.println("O que deseja alterar?");
            System.out.println("1. Nome");
            System.out.println("2. CEP");
            System.out.println("3. Complemento");
            System.out.println("4. Localizações");
            System.out.print("Opção: ");
            switch (op) {
               case "1":
                  System.out.print("Novo nome: ");
                  m.setNome(this.scanner.nextLine().trim());
                  System.out.println("Nome atualizado.\n");
                  return;
               case "2":
                  System.out.print("Novo CEP: ");
                  m.setCep(this.scanner.nextLine().trim());
                  System.out.println("CEP atualizado.\n");
                  return;
               case "3":
                  System.out.print("Novo complemento: ");
                  m.setComplemento(this.scanner.nextLine().trim());
                  System.out.println("Complemento atualizado.\n");
                  return;
               case "4":
                  if (m.getLocalizacoes().isEmpty()) {
                     System.out.println("Não há localizações cadastradas.\n");
                     return;
                  }

                  System.out.println("\n--- Localizações de " + m.getNome() + " ---");

                  int locIdx;
                  for(locIdx = 0; locIdx < m.getLocalizacoes().size(); ++locIdx) {
                     Mercado.Localizacao loc = (Mercado.Localizacao)m.getLocalizacoes().get(locIdx);
                     System.out.printf("%d. %s, Nº: %s (lat: %.6f, long: %.6f)%n", locIdx + 1, loc.getEndereco(), loc.getNumero(), loc.getLatitude(), loc.getLongitude());
                  }

                  System.out.print("Escolha a localização para alterar: ");
                  locIdx = Integer.parseInt(this.scanner.nextLine().trim()) - 1;
                  if (locIdx < 0 || locIdx >= m.getLocalizacoes().size()) {
                     System.out.println("Índice inválido.\n");
                     return;
                  }

                  System.out.print("Novo endereço: ");
                  String novoEnd = this.scanner.nextLine().trim();
                  System.out.print("Novo número: ");
                  String novoNum = this.scanner.nextLine().trim();
                  System.out.print("Nova latitude: ");
                  double novaLat = Double.parseDouble(this.scanner.nextLine().trim());
                  System.out.print("Nova longitude: ");
                  double novaLon = Double.parseDouble(this.scanner.nextLine().trim());
                  m.updateLocalizacao(locIdx, novoEnd, novoNum, novaLat, novaLon);
                  System.out.println("Localização atualizada.\n");
                  return;
            }

            System.out.println("Opção inválida.\n");
         } else {
            System.out.println("Índice inválido.\n");
         }
      }
   }

   private void excluirMercado() {
      if (this.mercados.isEmpty()) {
         System.out.println("Nenhum mercado cadastrado.\n");
      } else {
         System.out.println("\n--- Mercados Cadastrados ---");

         int idx;
         for(idx = 0; idx < this.mercados.size(); ++idx) {
            System.out.printf("%d. %s%n", idx + 1, ((Mercado)this.mercados.get(idx)).getNome());
         }

         System.out.print("Escolha o número do mercado para excluir: ");
         idx = Integer.parseInt(this.scanner.nextLine().trim()) - 1;
         if (idx >= 0 && idx < this.mercados.size()) {
            Mercado m = (Mercado)this.mercados.get(idx);
            System.out.print("Confirma exclusão de '" + m.getNome() + "'? (s/n): ");
            if (this.scanner.nextLine().trim().equalsIgnoreCase("s")) {
               this.mercados.remove(idx);
               System.out.println("Mercado excluído.\n");
            } else {
               System.out.println("Operação cancelada.\n");
            }

         } else {
            System.out.println("Índice inválido.\n");
         }
      }
   }

   private void visualizarMercados() {
      if (this.mercados.isEmpty()) {
         System.out.println("Nenhum mercado cadastrado.\n");
      } else {
         System.out.println("\n--- Lista de Mercados ---");
         Iterator var2 = this.mercados.iterator();

         while(var2.hasNext()) {
            Mercado m = (Mercado)var2.next();
            System.out.println(m);
         }

      }
   }

   private void cadastrarItem() {
      System.out.print("Nome do item: ");
      String nome = this.scanner.nextLine().trim();
      System.out.print("Quantidade: ");
      int quantidade = Integer.parseInt(this.scanner.nextLine().trim());
      System.out.print("Preço: ");
      double preco = Double.parseDouble(this.scanner.nextLine().trim());
      System.out.print("Descrição: ");
      String descricao = this.scanner.nextLine().trim();
      System.out.print("Validade (AAAA-MM-DD): ");
      LocalDate validade = LocalDate.parse(this.scanner.nextLine().trim());
      Item novoItem = new Item(nome, quantidade, preco, descricao, validade);
      this.itens.add(novoItem);
      System.out.println("Item cadastrado com sucesso!\n");
   }

   private void alterarItem() {
      if (this.itens.isEmpty()) {
         System.out.println("Nenhum item cadastrado.\n");
      } else {
         System.out.println("--- Itens Cadastrados ---");

         int idx;
         for(idx = 0; idx < this.itens.size(); ++idx) {
            System.out.printf("%d. %s%n", idx + 1, ((Item)this.itens.get(idx)).getNome());
         }

         System.out.print("Escolha o número do item para alterar: ");
         idx = Integer.parseInt(this.scanner.nextLine().trim()) - 1;
         if (idx >= 0 && idx < this.itens.size()) {
            label47: {
               Item item = (Item)this.itens.get(idx);
               System.out.println("1. Nome\n2. Quantidade\n3. Preço\n4. Descrição\n5. Validade");
               System.out.print("Escolha o campo para alterar: ");
               String op = this.scanner.nextLine().trim();
               switch (op.hashCode()) {
                  case 49:
                     if (!op.equals("1")) {
                        break label47;
                     }

                     System.out.print("Novo nome: ");
                     item.setNome(this.scanner.nextLine().trim());
                     break;
                  case 50:
                     if (!op.equals("2")) {
                        break label47;
                     }

                     System.out.print("Nova quantidade: ");
                     item.setQuantidade(Integer.parseInt(this.scanner.nextLine().trim()));
                     break;
                  case 51:
                     if (!op.equals("3")) {
                        break label47;
                     }

                     System.out.print("Novo preço: ");
                     item.setPreco(Double.parseDouble(this.scanner.nextLine().trim()));
                     break;
                  case 52:
                     if (!op.equals("4")) {
                        break label47;
                     }

                     System.out.print("Nova descrição: ");
                     item.setDescricao(this.scanner.nextLine().trim());
                     break;
                  case 53:
                     if (op.equals("5")) {
                        System.out.print("Nova validade (AAAA-MM-DD): ");
                        item.setValidade(LocalDate.parse(this.scanner.nextLine().trim()));
                        break;
                     }
                  default:
                     break label47;
               }

               System.out.println("Item alterado com sucesso.\n");
               return;
            }

            System.out.println("Opção inválida.");
         } else {
            System.out.println("Índice inválido.\n");
         }
      }
   }

   private void listarItens() {
      if (this.itens.isEmpty()) {
         System.out.println("Nenhum item cadastrado.\n");
      } else {
         System.out.println("\n--- Itens Cadastrados ---");

         for(int i = 0; i < this.itens.size(); ++i) {
            System.out.printf("%d. %s\n", i + 1, this.itens.get(i));
         }

         System.out.println("------------------------\n");
      }
   }

   private void visualizarItens() {
      if (this.itens.isEmpty()) {
         System.out.println("Nenhum item disponível.\n");
      } else {
         System.out.println("\n--- Itens Disponíveis ---");
         Iterator var2 = this.itens.iterator();

         while(var2.hasNext()) {
            Item item = (Item)var2.next();
            System.out.println(item);
         }

         System.out.println();
      }
   }

   private void cadastrarItemComprado() {
      if (this.itens.isEmpty()) {
         System.out.println("Nenhum item disponível para compra.\n");
      } else {
         System.out.println("\n--- Itens Disponíveis para Comprar ---");

         int idx;
         for(idx = 0; idx < this.itens.size(); ++idx) {
            System.out.printf("%d. %s\n", idx + 1, ((Item)this.itens.get(idx)).getNome());
         }

         System.out.print("Escolha o número do item comprado: ");
         idx = Integer.parseInt(this.scanner.nextLine().trim()) - 1;
         if (idx >= 0 && idx < this.itens.size()) {
            Item itemBase = (Item)this.itens.get(idx);
            System.out.print("Informe a quantidade comprada: ");
            int quantidade = Integer.parseInt(this.scanner.nextLine().trim());
            Item itemComprado = new Item(itemBase.getNome(), quantidade, itemBase.getPreco(), itemBase.getDescricao(), itemBase.getValidade());
            this.usuarioLogado.addItemComprado(itemComprado);
            System.out.println("Item registrado no histórico de compras!\n");
         } else {
            System.out.println("Índice inválido.\n");
         }
      }
   }

   private void verRecomendacoes() {
      List<Item> historico = this.usuarioLogado.getItensComprados();
      if (historico.isEmpty()) {
         System.out.println("Nenhuma recomendação disponível. Compre algo para receber recomendações!\n");
      } else {
         Map<String, List<Item>> agrupados = (Map)historico.stream().collect(Collectors.groupingBy(Item::getNome));
         System.out.println("\n\ud83d\udccc Recomendações com base em suas compras:");
         Iterator var4 = agrupados.keySet().iterator();

         while(var4.hasNext()) {
            String nome = (String)var4.next();
            List<Item> itensDoTipo = (List)agrupados.get(nome);
            int soma = 0;

            Item i;
            for(Iterator var8 = itensDoTipo.iterator(); var8.hasNext(); soma += i.getQuantidade()) {
               i = (Item)var8.next();
            }

            double media = (double)soma / (double)itensDoTipo.size();
            System.out.printf("- %s | Quantidade recomendada: %.1f (baseado em %d compras)\n", nome, media, itensDoTipo.size());
         }

         System.out.println();
      }
   }

   private void adminMenu() {
      while(this.usuarioLogado != null) {
         System.out.println("===== MENU ADMINISTRADOR =====");
         System.out.println("1. Criar administrador");
         System.out.println("2. Cadastrar mercado");
         System.out.println("3. Alterar mercado");
         System.out.println("4. Excluir mercado");
         System.out.println("5. Listar usuários");
         System.out.println("6. Cadastrar item");
         System.out.println("7. Alterar item");
         System.out.println("8. Listar itens");
         System.out.println("9. Logout");
         System.out.print("Escolha uma opção: ");
         switch (op) {
            case "1":
               this.cadastrarAdmin();
               continue;
               break;
            case "2":
               this.cadastrarMercado();
               continue;
               break;
            case "3":
               this.alterarMercado();
               continue;
               break;
            case "4":
               this.excluirMercado();
               continue;
               break;
            case "5":
               this.listarUsuarios();
               continue;
               break;
            case "6":
               this.cadastrarItem();
               continue;
               break;
            case "7":
               this.alterarItem();
               continue;
               break;
            case "8":
               this.listarItens();
               continue;
               break;
            case "9":
               System.out.println("Logout realizado.\n");
               this.usuarioLogado = null;
               continue;
         }

         System.out.println("Opção inválida.\n");
      }

   }

   private void usuarioMenu() {
      while(this.usuarioLogado != null) {
         System.out.println("===== MENU USUÁRIO =====");
         System.out.println("1. Visualizar mercados");
         System.out.println("2. Ver itens disponíveis");
         System.out.println("3. Registrar item comprado");
         System.out.println("4. Ver recomendações");
         System.out.println("5. Logout");
         System.out.print("Escolha uma opção: ");
         switch (op) {
            case "1":
               this.visualizarMercados();
               continue;
               break;
            case "2":
               this.visualizarItens();
               continue;
               break;
            case "3":
               this.cadastrarItemComprado();
               continue;
               break;
            case "4":
               this.verRecomendacoes();
               continue;
               break;
            case "5":
               this.usuarioLogado = null;
               System.out.println("Logout realizado.\n");
               continue;
         }

         System.out.println("Opção inválida.\n");
      }

   }

   private void listarUsuarios() {
      System.out.println("\n--- Usuários Cadastrados ---");
      Iterator var2 = this.usuarios.iterator();

      while(var2.hasNext()) {
         Usuario u = (Usuario)var2.next();
         System.out.println(u);
      }

      System.out.println("----------------------------\n");
   }

   private boolean existeLogin(String login) {
      return this.usuarios.stream().anyMatch((u) -> {
         return u.getLogin().equals(login);
      });
   }

   private Usuario findUsuario(String login) {
      return (Usuario)this.usuarios.stream().filter((u) -> {
         return u.getLogin().equals(login);
      }).findFirst().orElse((Object)null);
   }
}

